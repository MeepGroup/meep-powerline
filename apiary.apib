FORMAT: 1A
HOST: http://meeppanel.com:3002/

# Powerline
<img src="http://i.imgur.com/g9vkPYh.png" alt="Powerline Logo" width="350">

Powerline is the powerhouse API that runs Meep. It's build on NodeJS and supports
any frontend that can make Get, Post and Put requests.

## Getting Started

To start, please make sure you have NodeJS `v5.2.0` or greater installed. You
will also need to install MongoDB and have it running before beginning.

Powerline expects `meep-rooster` and `meep-hawk` to be running on the master Nest.
Additionally Powerline should only be run on the Master server for your Meep setup.

## Running Powerline

To build first `npm i`, then simply run `npm start`. You may then visit
`http://localhost:3002` in your browser, or start making requests.

```
npm install
npm start
```

Powerline is the powerhouse API that runs Meep. It's build on NodeJS and supports any frontend that can make Get, Post and Put requests.

# Group Authentication & Account

## Login [/login]

*For ease of use, a web UI is provided when accessing this route via the browser.*
### /login [POST]

+ Request 200 (application/json)

        {
            "email": "example@gmail.com",
            "password": "yourpassword"
        }

+ Response 200 (application/json)

        {
            "_id": "idNumber",
            "__v": 0,
            "isAdmin": true,
            "local": {
                "password": "hashed_password",
                "email": "example@gmail.com"
            }
        }

## Signup [/signup]
*For ease of use, a web UI is provided when accessing this route via the browser.*

### /signup [POST]

+ Request

        {
            "email": "example@gmail.com",
            "password": "yourpassword"
        }

+ Response 200 (application/json)

        {
            "_id": "idNumber",
            "__v": 0,
            "isAdmin": true,
            "local": {
                "password": "hashed_password",
                "email": "example@gmail.com"
            }
        }

## Profile [/profile]

### /profile [GET]

+ Response 200 (application/json)

        {
            "_id": "idNumber",
            "__v": 0,
            "isAdmin": true,
            "local": {
                "password": "hashed_password",
                "email": "example@gmail.com"
            }
        }


## Logout [/logout]

### /logout [GET]

+ Response 200 (application/json)


# Group Registry

## All Yolks [/registry/all]

### /registry/all [GET]

+ Response 200 (application/json)

        {
          "yolks": [
            {
              "registeredAt": "2016-01-17T01:54:59.393Z",
              "name": "Node Ubuntu",
              "version": "5.4.0",
              "module": "node_ubuntu",
              "_id": "569af473882ef342493a9ea7",
              "__v": 0
            },
            {
              "registeredAt": "2016-01-19T04:16:16.897Z",
              "name": "Nginx",
              "version": "1.0.0",
              "module": "nginx_ubuntu",
              "_id": "569db890882ef342493a9eb3",
              "__v": 0
            }
          ]
        }

## Register [/registry/register]

*For ease of use, a web UI is provided when accessing this route via the browser.*

### /registry/register [POST]

+ Request

        {
            "name": "Nginx",
            "version": "1.0.1",
            "module": "nginx_ubuntu"
        }

+ Response 200 (application/json)

        {
          "success": "Sucessfully registered new Yolk.",
          "yolk": {
            "__v": 0,
            "registeredAt": "2016-02-02T19:50:01.612Z",
            "name": "Nginx",
            "version": "1.0.1",
            "module": "nginx_ubuntu",
            "_id": "56b10869bd34de6868dd78a9"
          }
        }

+ Response 500 (application/json)

        {
          "error": "Yolk is already registered."
        }

## Find [/registry/find]

### /registry/find [POST]

+ Request

        {
            "name": "Nginx",
            "version": "1.0.0"
        }

+ Response 200 (application/json)

        {
          "yolk": {
            "registeredAt": "2016-01-19T04:16:16.897Z",
            "name": "Nginx",
            "version": "1.0.0",
            "module": "nginx_ubuntu",
            "_id": "569db890882ef342493a9eb3",
            "__v": 0
          },
          "module": {
            "tasks": [
              "sudo apt-get update",
              "sudo apt-get install -y nginx"
            ],
            "translator": {
              "start": "nginx",
              "stop": "nginx -s stop",
              "restart": "nginx -s restart"
            }
          }
        }

+ Response 404 (application/json)

        {
            "error": "Yolk not found."
        }
     
# Group Nest
   
## Register [/nest/register]
*Please note, Nest will be automatically assigned to the user who issued the request.*
### /nest/register [POST]

+ Request 200 (application/json)

        {
            "user": "root",
            "port": 22,
            "address": "127.0.0.1",
            "password": "password123",
            "os": "ubuntu",
            "provider": "Softlayer (IBM)",
            "location": "Washington 1",
            "network": "250Mb/s",
            "package": "1GB Public VPS"
        }

+ Response 200 (application/json)

        {
            "success": "Sucessfully registered server."
        }

## Provision [/nest/provision]
*Please note, You can only provision nests you own.*

### /nest/provision [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1",
        }

+ Response 200 (application/json)

        {
            "success": "Sucessfully started provisioning, check /nest/view for status."
        }
        
+ Response 403 (application/json)

        {
            "error": "You do not own this nest!"
        }
    
## Prey [/nest/prey]

*Please note, this is not the same as /prey. This route gives
you ownership, provision and other stats about this nest.*

### /nest/prey [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1"
        }

+ Response 200 (application/json)
        
        {
          "_id": "566b9011b63ac11cc4e7c111",
          "address": "75.126.217.82",
          "name": "Wombat",
          "port": 22,
          "user": "root",
          "password": "REDACTED",
          "provision_token": "d9f35ff0-a07d-11e5-bdf7-554d324f0b70",
          "busy": true,
          "__v": 0,
          "provisioned": true,
          "provisioned_at": "2015-12-12T03:11:14.022Z",
          "eggs": [
            "provision"
          ],
          "usage": "Redacted due to length"
        }
        

## Add Role [/nest/addrole]

### /nest/addrole [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1",
            "role": "admins",
            "user": "exampleuser@gmail.com"
        }

+ Response 200 (application/json)
        
        {
          "success": "User exampleuser@gmail.com has been added to group admins"
        }
        
+ Response 200 (application/json)
        
        {
        "success": "User already in group admins"
        }

+ Response 404 (application/json)
        
        {
          "error": "Group admins not found."
        }
    

## Revoke Role [/nest/revokerole]

### /nest/revokerole [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1",
            "role": "admins",
            "user": "exampleuser@gmail.com"
        }

+ Response 200 (application/json)
        
        {
          "success": "User exampleuser@gmail.com has been removed from group admins"
        }
        
+ Response 200 (application/json)
        
        {
        "success": "User not in group admins"
        }

+ Response 404 (application/json)
        
        {
          "error": "Group admins not found."
        }
        

## Install [/nest/install]

### /nest/install [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1",
            "name": "Node Ubuntu",
            "version": "5.5.0"
        }

+ Response 200 (application/json)
        
        {
        "success": "Egg installation started."
        }

+ Response 409 (application/json)
        
        {
          "success": "Egg already installed."
        }
        
## My Nests [/nest/mynests]

### /nest/mynests [GET]

+ Response 200 (application/json)
        
        [
          {
            "__v": 18,
            "_id": "56a2774902bb6f3347405b34",
            "address": "50.22.134.8",
            "authKey": "8df87f38-816f-404d-b77c-5d9f49e3dcb5",
            "busy": false,
            "details": {
              "os": "Ubuntu 14.04",
              "provider": "Softlayer (IBM)",
              "package": "1GB Public VPS",
              "location": "Seattle 1",
              "network": "250Mb/s"
            },
            "name": "Local",
            "password": "REDACTED",
            "port": 22,
            "provisioned": true,
            "provisionedAt": "2016-01-22T18:40:48.039Z",
            "registeredAt": "2016-01-22T18:39:05.147Z",
            "usage": {
              "mem": {
                "MemTotal": "1013704kB",
                "MemFree": "173312kB",
                "Buffers": "166728kB",
                "Cached": "523088kB",
                "SwapCached": "536kB",
                "Active": "518552kB",
                "Inactive": "230684kB",
                "Active(anon)": "17972kB",
                "Inactive(anon)": "43984kB",
                "Active(file)": "500580kB",
                "Inactive(file)": "186700kB",
                "Unevictable": "3704kB",
                "Mlocked": "3704kB",
                "SwapTotal": "2096444kB",
                "SwapFree": "2095152kB",
                "Dirty": "0kB",
                "Writeback": "0kB",
                "AnonPages": "62752kB",
                "Mapped": "21888kB",
                "Shmem": "72kB",
                "Slab": "71916kB",
                "SReclaimable": "64012kB",
                "SUnreclaim": "7904kB",
                "KernelStack": "768kB",
                "PageTables": "3024kB",
                "NFS_Unstable": "0kB",
                "Bounce": "0kB",
                "WritebackTmp": "0kB",
                "CommitLimit": "2603296kB",
                "Committed_AS": "240524kB",
                "VmallocTotal": "34359738367kB",
                "VmallocUsed": "4764kB",
                "VmallocChunk": "34359729156kB",
                "HardwareCorrupted": "0kB",
                "AnonHugePages": "0kB",
                "HugePages_Total": "0",
                "HugePages_Free": "0",
                "HugePages_Rsvd": "0",
                "HugePages_Surp": "0",
                "Hugepagesize": "2048kB",
                "DirectMap4k": "1048576kB",
                "DirectMap2M": "0kB"
              },
              "cpu": {
                "usage": {
                  "per_tread": [
                    "0.2",
                    "0.0"
                  ],
                  "overall": "0.64705"
                },
                "Architecture": "x86_64",
                "CPU op-mode(s)": "32-bit,64-bit",
                "Byte Order": "LittleEndian",
                "CPU(s)": "1",
                "On-line CPU(s) list": "0",
                "Thread(s) per core": "1",
                "Core(s) per socket": "1",
                "Socket(s)": "1",
                "NUMA node(s)": "1",
                "Vendor ID": "GenuineIntel",
                "CPU family": "6",
                "Model": "30",
                "Stepping": "5",
                "CPU MHz": "2933.412",
                "BogoMIPS": "5866.82",
                "Hypervisor vendor": "Xen",
                "Virtualization type": "para",
                "L1d cache": "32K",
                "L1i cache": "32K",
                "L2 cache": "256K",
                "L3 cache": "8192K",
                "NUMA node0 CPU(s)": "0"
              },
              "hdd": {
                "spaceFree": "95"
              }
            },
            "roles": {
              "owner": "admin@admin.com",
              "users": [],
              "admins": []
            },
            "shims": [],
            "progress": [
              2,
              2
            ],
            "eggs": [
              {
                "__v": 0,
                "_id": "569db890882ef342493a9eb3",
                "module": "nginx_ubuntu",
                "version": "1.0.0",
                "name": "Nginx",
                "registeredAt": "2016-01-19T04:16:16.897Z"
              },
              {
                "__v": 0,
                "_id": "569af473882ef342493a9ea7",
                "module": "node_ubuntu",
                "version": "5.4.0",
                "name": "Node Ubuntu",
                "registeredAt": "2016-01-17T01:54:59.393Z"
              }
            ]
          },
        ]
        

# Group Payments

## Add Credits [/pay/credit/add]

### /pay/credit/add [POST]

+ Request 200 (application/json)

        {
            "credits": 1.25,
            "user": "exampleuser@gmail.com"
        }

+ Response 200 (application/json)
        
        {
          "success": "User exampleuser@gmail.com has credited 1.25 credits"
        }
        

+ Response 404 (application/json)
        
        {
          "error": "User exampleuser@gmail.com not found."
        }
        

## Remove Credits [/pay/credit/del]

### /pay/credit/del [POST]

+ Request 200 (application/json)

        {
            "credits": 1.25,
            "user": "exampleuser@gmail.com"
        }

+ Response 200 (application/json)
        
        {
          "success": "User exampleuser@gmail.com has credited 1.25 credits"
        }
        

+ Response 404 (application/json)
        
        {
          "error": "User exampleuser@gmail.com not found."
        }
        

# Group Command 

## Add Shim [/command/shim/add/:address]

### /command/shim/add/:address [POST]

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="shim"; filename="testMod.js"
        Content-Type: text/javascript

        -----BOUNDARY
        
+ Response 200 (application/json)
        
        {
          "success": true,
          "message": "Successfully uploaded new shim.",
          "shim": {
            "fieldname": "shim",
            "originalname": "testMod.js",
            "encoding": "7bit",
            "mimetype": "text/javascript",
            "destination": "./shims/",
            "filename": "testMod.js",
            "path": "shims/testMod.js",
            "size": 63
          }
        }
        

## Send Command [/command/issue]

### /command/issue [POST]

+ Request 200 (application/json)

        {
            shim: "testMod",
            command: "ls",
            address: "127.0.0.1"
        }
        
+ Response 200 (application/json)
        
        {
          "success": true,
          "message": "Successfully executed command ls.",
          "command": ".meep"
        }
        

# Group Notify 

## New Notification [/notify/add]
### /notify/add [POST]

+ Request 200 (application/json)

        {
            message: "test notification"
        }
        
+ Response 200 (application/json)
        
        {
          "status": 200,
          "success": "Successfully dispatched a new notification.",
          "noti": {
            "__v": 0,
            "uuid": "999b0550-c9e7-11e5-9815-db7dd0c63db7",
            "seen": false,
            "message": "test notification",
            "createdAt": "2016-02-02T20:00:25.637Z",
            "locked": false,
            "assignee": "admin@admin.com",
            "from": "System",
            "_id": "56b10ad9bd34de6868dd78aa"
          }
        }
     
        

## Delete Notification [/notify/del]
### /notify/del [POST]

+ Request 200 (application/json)

        {
            uuid: "999b0550-c9e7-11e5-9815-db7dd0c63db7"
        }
        
+ Response 200 (application/json)
        
        {
          "status": 200,
          "success": "Successfully deleted notification."
        }
        
+ Response 404 (application/json)
        
        {
          "status": 404,
          "error": "Notification not found."
        }
        

## Mark Notification Seen [/notify/seen]
### /notify/seen [POST]

+ Request 200 (application/json)

        {
            uuid: "999b0550-c9e7-11e5-9815-db7dd0c63db7"
        }
        
+ Response 200 (application/json)
        
        {
          "status": 200,
          "success": "Successfully marked notification as seen."
        }
        
+ Response 404 (application/json)
        
        {
          "status": 404,
          "error": "Notification not found."
        }
        

## Toggle Notification Lock [/notify/togglelock]
### /notify/togglelock [POST]

+ Request 200 (application/json)

        {
            uuid: "999b0550-c9e7-11e5-9815-db7dd0c63db7"
        }
        
+ Response 200 (application/json)
        
        {
          "status": 200,
          "success": "Successfully changed notification locked status to true."
        }
        
+ Response 200 (application/json)

        {
          "status": 200,
          "success": "Successfully changed notification locked status to false."
        }
        
+ Response 404 (application/json)
        
        {
          "status": 404,
          "error": "Notification not found."
        }
        

## Get Notifications [/notify]
### /notify [POST]

+ Request 200 (application/json)

        {
        }
        
+ Response 200 (application/json)
        
        [
          {
            "uuid": "032881e0-c093-11e5-9238-a3ca6eecc6d0",
            "seen": true,
            "message": "50.22.134.3 has finished the provisioning task and is ready for use.",
            "createdAt": "2016-01-21T23:02:15.038Z",
            "locked": false,
            "assignee": "admin@admin.com",
            "from": "System",
            "_id": "56a1637714d08f6e6db52be3",
            "__v": 0
          },
          {
            "uuid": "19aff280-c0d0-11e5-9238-a3ca6eecc6d0",
            "seen": true,
            "message": "test notification",
            "createdAt": "2016-01-22T06:19:32.136Z",
            "locked": false,
            "assignee": "admin@admin.com",
            "from": "System",
            "_id": "56a1c9f414d08f6e6db52be5",
            "__v": 0
          }
        ]