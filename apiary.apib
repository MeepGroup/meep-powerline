FORMAT: 1A
HOST: http://meeppanel.com:3002/

# Powerline
<img src="http://i.imgur.com/g9vkPYh.png" alt="Powerline Logo" width="350">

Powerline is the powerhouse API that runs Meep. It's build on NodeJS and supports
any frontend that can make Get, Post and Put requests.

## Getting Started

To start, please make sure you have NodeJS `v5.2.0` or greater installed. You
will also need to install MongoDB and have it running before beginning.

Powerline expects `meep-rooster` and `meep-hawk` to be running on the master Nest.
Additionally Powerline should only be run on the Master server for your Meep setup.

## Running Powerline

To build first `npm i`, then simply run `npm start`. You may then visit
`http://localhost:3002` in your browser, or start making requests.

```
npm install
npm start
```

Powerline is the powerhouse API that runs Meep. It's build on NodeJS and supports any frontend that can make Get, Post and Put requests.

## Login [/login]

*For ease of use, a web UI is provided when accessing this route via the browser.*
### /login [POST]

+ Request 200 (application/json)

        {
            "email": "example@gmail.com",
            "password": "yourpassword"
        }

+ Response 200 (application/json)

        {
            "_id": "idNumber",
            "__v": 0,
            "isAdmin": true,
            "local": {
                "password": "hashed_password",
                "email": "example@gmail.com"
            }
        }

## Signup [/signup]
*For ease of use, a web UI is provided when accessing this route via the browser.*

### /signup [POST]

+ Request

        {
            "email": "example@gmail.com",
            "password": "yourpassword"
        }

+ Response 200 (application/json)

        {
            "_id": "idNumber",
            "__v": 0,
            "isAdmin": true,
            "local": {
                "password": "hashed_password",
                "email": "example@gmail.com"
            }
        }

## Profile [/profile]

### /profile [GET]

+ Response 200 (application/json)

        {
            "_id": "idNumber",
            "__v": 0,
            "isAdmin": true,
            "local": {
                "password": "hashed_password",
                "email": "example@gmail.com"
            }
        }


## Logout [/logout]

### /logout [GET]

+ Response 200 (application/json)


## Config [/config]

### /config [GET]

+ Response 200 (application/json)

        {
            "master_address": [
                "master.meeppanel.com",
                "192.168.0.1"
            ],
            "hawk_address": "meeppanel.com:3000",
            "trusted_connections": [
                "192.168.0.1"
            ]
        }


## Registry List [/registry/list]

### /registry/list [GET]

+ Response 200 (application/json)

        [
            {
                "_id": "13125146215",
                "version": "5.0.0",
                "name": "Node",
                "egg": "{\"server\":{\"host\":\"192.167.0.4\",\"user\":\"root\",\"password\":\"psw123\",\"port\":22},\"tasks\":[\"curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -\",\"apt-get install -y nodejs\"],\"test\":true}",
                "__v": 0
            }
        ]

## Registry Register [/registry/register]

*For ease of use, a web UI is provided when accessing this route via the browser.*

### /registry/register [POST]

+ Request

        {
            "eggName": "Node Egg",
            "version": "0.0.1",
            "egg"    : "Object (Stringified)"
        }

+ Response 200 (application/json)

        {
            "success": "Successfully registered egg"
        }

+ Response 500 (application/json)

        {
            "error": "Egg with this version already exists, please bump version."
        }

## Registry Find [/registry/find]

### /registry/find [POST]

+ Request

        {
            "eggName": "Node",
            "version": "4.0.0"
        }

+ Response 200 (application/json)

        {
            "_id": "1234567890",
            "version": "4.0.0",
            "name": "Node",
            "egg": "{\"server\":{\"host\":\"192.167.0.4\",\"user\":\"root\",\"password\":\"psw123\",\"port\":22},\"tasks\":[\"curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -\",\"apt-get install -y nodejs\"],\"test\":true}",
            "__v": 0
        }

+ Response 404 (application/json)

        {
            "error": "Egg not found."
        }


## Prey [/prey/{address}]
*Please note, this is not the same as /nest/prey. This route gives
you usage and performance statistics about the nest.*

+ Parameters
    + address (string) - IP of the machine to prey on

### /prey [GET]

+ Response 200 (application/json)

        {
          "__v": 0,
          "_id": "5662779eaa79b96503f351f6",
          "address": "127.0.0.1",
          "cpu": {
            "usage": {
              "per_tread": [
                "0.0",
                "0.0"
              ],
              "overall": "0.0879013"
            },
            "Architecture": "x86_64",
            "CPU op-mode(s)": "32-bit,64-bit",
            "Byte Order": "LittleEndian",
            "CPU(s)": "8",
            "On-line CPU(s) list": "0-7",
            "Thread(s) per core": "2",
            "Core(s) per socket": "4",
            "Socket(s)": "1",
            "NUMA node(s)": "1",
            "Vendor ID": "GenuineIntel",
            "CPU family": "6",
            "Model": "60",
            "Stepping": "3",
            "CPU MHz": "3499.742",
            "BogoMIPS": "6999.48",
            "Virtualization": "VT-x",
            "L1d cache": "32K",
            "L1i cache": "32K",
            "L2 cache": "256K",
            "L3 cache": "8192K",
            "NUMA node0 CPU(s)": "0-7"
          },
          "hdd": {
            "spaceUsed": "99"
          },
          "id": 1,
          "instanceType": "master",
          "mem": {
            "MemTotal": "8135740kB",
            "MemFree": "5640208kB",
            "Buffers": "258480kB",
            "Cached": "1475348kB",
            "SwapCached": "0kB",
            "Active": "1409336kB",
            "Inactive": "780376kB",
            "Active(anon)": "458540kB",
            "Inactive(anon)": "432kB",
            "Active(file)": "950796kB",
            "Inactive(file)": "779944kB",
            "Unevictable": "3704kB",
            "Mlocked": "3704kB",
            "SwapTotal": "999420kB",
            "SwapFree": "999420kB",
            "Dirty": "4kB",
            "Writeback": "0kB",
            "AnonPages": "459608kB",
            "Mapped": "42836kB",
            "Shmem": "628kB",
            "Slab": "196356kB",
            "SReclaimable": "167700kB",
            "SUnreclaim": "28656kB",
            "KernelStack": "2488kB",
            "PageTables": "7156kB",
            "NFS_Unstable": "0kB",
            "Bounce": "0kB",
            "WritebackTmp": "0kB",
            "CommitLimit": "5067288kB",
            "Committed_AS": "1529416kB",
            "VmallocTotal": "34359738367kB",
            "VmallocUsed": "91828kB",
            "VmallocChunk": "34359636476kB",
            "HardwareCorrupted": "0kB",
            "AnonHugePages": "174080kB",
            "HugePages_Total": "0",
            "HugePages_Free": "0",
            "HugePages_Rsvd": "0",
            "HugePages_Surp": "0",
            "Hugepagesize": "2048kB",
            "DirectMap4k": "74044kB",
            "DirectMap2M": "1982464kB",
            "DirectMap1G": "6291456kB"
          },
          "name": "Dodo"
        }


## Trust [/trust/{address}]

+ Parameters
    + address (string) - IP of the machine to trust with access to config file.

### /trust [GET]

+ Response 200 (application/json)

        {
            "success": "Sucessfully trusted {address}."
        }
        
        
## Nest Register [/nest/register]
*Please note, Nest will be automatically assigned to the user who issued the request.*
### /nest/register [POST]

+ Request 200 (application/json)

        {
            "user": "root",
            "host": 22,
            "address": "127.0.0.1",
            "password": "password123"
        }

+ Response 200 (application/json)

        {
            "success": "Sucessfully registered server."
        }

## Nest Provision [/nest/provision]
*Please note, You can only provision nests you own.*

### /nest/provision [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1",
        }

+ Response 200 (application/json)

        {
            "success": "Sucessfully started provisioning, check /nest/view for status."
        }
        
+ Response 403 (application/json)

        {
            "success": "You do not own this nest!"
        }
        
        
## Nest Prey [/nest/prey]
*Please note, this is not the same as /prey. This route gives
you ownership, provision and other stats about this nest.*
### /nest/prey [POST]

+ Request 200 (application/json)

        {
            "address": "127.0.0.1"
        }

+ Response 200 (application/json)
        
        {
          "_id": "566b9011b63ac11cc4e7c111",
          "address": "75.126.217.82",
          "name": "Wombat",
          "port": 22,
          "user": "root",
          "password": "REDACTED",
          "provision_token": "d9f35ff0-a07d-11e5-bdf7-554d324f0b70",
          "busy": true,
          "__v": 0,
          "provisioned": true,
          "provisioned_at": "2015-12-12T03:11:14.022Z",
          "eggs": [
            "provision"
          ]
        }
